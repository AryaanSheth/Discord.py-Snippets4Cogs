{
    "Discord.py Boilerplate Cog Main Code": {
        "prefix": "!cogmain",
        "body": [
            "# read the docs https://discordpy.readthedocs.io/en/stable/",
            "# pip install discord.py",
            "import discord",
            "from discord.ext import commands",
            "import os",
            "",
            "client = commands.Bot(command_prefix=commands.when_mentioned_or('${2:!}'))",
            "",
            "initial_extensions = []",
            "",
            "# Create a folder called cogs in the same directory as this file",
            "for filename in os.listdir('./cogs'):",
            "    if filename.endswith('.py'):",
            "        initial_extensions.append(filename[:-3])",
            "",
            "if __name__ == '__main__':",
            "    for cog in initial_extensions:",
            "        client.load_extension(f'cogs.{cog}')",
            "",
            "# get token from https://discord.com/developers/applications",
            "client.run(${1:token})",
        ],
        "description": "Discord.py boilerplate cogs code for main.py",
    },
    "Discord.py Boilerplate Cog Code": {
        "prefix": "!cog",
        "body": [
            "import discord",
            "from discord.ext import commands",
            "",
            "class ${1:CogName}(commands.Cog):",
            "    def __init__(self, client):",
            "        self.client = client",
            "",
            "    @commands.command()",
            "    async def ${2:command_name}(self, ctx):",
            "        ${3:await ctx.send('Hello World')}",
            "",
            "def setup(client):",
            "    client.add_cog(${1:CogName}(client))",
        ],
        "description": "Discord.py boilerplate cogs code for cogs",
    }, 
    "Discord.py Boilerplate Startup Code": {
        "prefix": "!startup",
        "body": [
            "import discord",
            "from discord.ext import commands",
            "",
            "class startup(commands.Cog):",
            "    def __init__(self, client):",
            "        self.client = client",
            "",
            "    @commands.command()",
            "    async def on_ready(self, ctx):",
            "        ${1:print('Bot is Ready!')}",
            "",
            "def setup(client):",
            "    client.add_cog(startup(client))",
        ],
        "description": "Discord.py boilerplate startup code on_ready",
    },
    "Discord.py Boilerplate Shutdown Code": {
        "prefix": "!shutdown",
        "body": [
            "import discord",
            "from discord.ext import commands",
            "",
            "class shutdown(commands.Cog):",
            "    def __init__(self, client):",
            "        self.client = client",
            "",
            "    @commands.command()",
            "    async def on_shutdown(self, ctx):",
            "        ${1:print('Bot is shutting down!')}",
            "",
            "def setup(client):",
            "    client.add_cog(shutdown(client))",
        ],
        "description": "Discord.py boilerplate shutdown code on_shutdown",
    },
    "Discord.py Boilerplate Message Code":{
        "prefix": "!onmessage",
        "body": [
            "import discord",
            "from discord.ext import commands",
            "",
            "class onMessage(commands.Cog):",
            "    def __init__(self, client):",
            "        self.client = client",
            "",
            "    @commands.command()",
            "    async def on_message(self, ctx):",
            "        ${1:print('Message received!')}",
            "",
            "def setup(client):",
            "    client.add_cog(onMessage(client))",
        ],
        "description": "Discord.py boilerplate message code on_message",
    },
    "Discord.py Boilerplate Typing Code": {
        "prefix": "!ontyping",
        "body": [
            "import discord",
            "from discord.ext import commands",
            "",
            "class onTyping(commands.Cog):",
            "    def __init__(self, client):",
            "        self.client = client",
            "",
            "    @commands.command()",
            "    async def on_typing(self, ctx):",
            "        ${1:print('User is typing!')}",
            "",
            "def setup(client):",
            "    client.add_cog(onTyping(client))",
        ],
        "description": "Discord.py boilerplate typing code on_typing",
    }

}